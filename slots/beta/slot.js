const slotMachine = document.getElementById('slot-machine');
const balanceDisplay = document.getElementById('balance');
const spinButton = document.getElementById('spin-button');
const betAmountInput = document.getElementById('bet-amount');

// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
const symbols = ['üçí', 'üçã', 'üçâ', '‚≠ê', 'üîî', 'üíé'];

let balance = parseInt(localStorage.getItem('slotBalance')) || 1000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
let grid = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
function getRandomSymbol() {
    const randomIndex = Math.floor(Math.random() * symbols.length);
    return symbols[randomIndex];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏
function updateGrid() {
    grid = [];
    slotMachine.innerHTML = '';
    for (let i = 0; i < 3; i++) {
        let row = [];
        for (let j = 0; j < 5; j++) {
            const cell = document.createElement('div');
            cell.classList.add('slot-cell');
            cell.textContent = '‚ùì'; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            slotMachine.appendChild(cell);
            row.push('‚ùì');
        }
        grid.push(row);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–µ–π
function checkWin() {
    let winMultiplier = 0;
    const winningCells = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    grid.forEach((row, rowIndex) => {
        if (row.every(symbol => symbol === row[0] && symbol !== '‚ùì')) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Å–∏–º–≤–æ–ª –Ω–µ –±—ã–ª "?" (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
            winMultiplier += 1; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            row.forEach((_, colIndex) => winningCells.push([rowIndex, colIndex])); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    for (let j = 0; j < 5; j++) {
        if (grid[0][j] === grid[1][j] && grid[1][j] === grid[2][j] && grid[0][j] !== '‚ùì') {
            winMultiplier += 1; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            for (let i = 0; i < 3; i++) {
                winningCells.push([i, j]); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (grid[0][0] === grid[1][1] && grid[1][1] === grid[2][2] && grid[0][0] !== '‚ùì') {
        winMultiplier += 1; // –î–∏–∞–≥–æ–Ω–∞–ª—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
        winningCells.push([0, 0], [1, 1], [2, 2]); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
    }
    if (grid[0][4] === grid[1][3] && grid[1][3] === grid[2][2] && grid[0][4] !== '‚ùì') {
        winMultiplier += 1; // –î–∏–∞–≥–æ–Ω–∞–ª—å —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        winningCells.push([0, 4], [1, 3], [2, 2]); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫
    }

    return { winMultiplier, winningCells };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalance(winMultiplier, bet) {
    if (winMultiplier > 0) {
        const winnings = bet * (winMultiplier + 1); // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        balance += winnings;
    } else {
        balance -= bet;
    }
    balanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å: ${balance}`;
    localStorage.setItem('slotBalance', balance); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ localStorage
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
function highlightWinners(winningCells) {
    winningCells.forEach(([row, col]) => {
        const cell = slotMachine.children[row * 5 + col];
        cell.classList.add('winner'); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
function animateColumns() {
    const spinDuration = 5000; // –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const columnDuration = spinDuration / 5; // –í—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const promises = [];

    for (let j = 0; j < 5; j++) {
        promises.push(new Promise((resolve) => {
            let columnSymbols = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–∏
            let counter = 0;
            const interval = setInterval(() => {
                const randomSymbol = getRandomSymbol();
                const cellIndex = counter % 3; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —è—á–µ–π–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–æ–ª–±—Ü–µ
                const cell = slotMachine.children[cellIndex * 5 + j];
                cell.textContent = randomSymbol;

                columnSymbols[cellIndex] = randomSymbol; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                counter++;
                if (counter >= 10) { // –ü–æ—Å–ª–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
                    clearInterval(interval);
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–µ—Ç–∫–µ
                    for (let i = 0; i < 3; i++) {
                        const finalCell = slotMachine.children[i * 5 + j];
                        finalCell.textContent = columnSymbols[i]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏
                        grid[i][j] = columnSymbols[i]; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É
                    }
                    resolve();
                }
            }, columnDuration / 10); // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫–∏ 10 —Ä–∞–∑ –∑–∞ –≤—Ä–µ–º—è –∫–æ–ª–æ–Ω–Ω—ã
        }));
    }

    return Promise.all(promises);
}

// –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É
async function spinSlots() {
    const bet = parseInt(betAmountInput.value);

    if (bet > balance || bet <= 0) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞!');
        return;
    }

    updateGrid();
    
    await animateColumns(); // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

    // –¢–∞–π–º-–∞—É—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—ã–∏–≥—Ä—ã—à–µ–π
    await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å

    const { winMultiplier, winningCells } = checkWin();
    highlightWinners(winningCells); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    setTimeout(() => {
        if (winMultiplier > 0) {
            alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet * (winMultiplier + 1)}!`);
        } else {
            alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!');
        }
    }, 300); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 100 –º—Å –ø–æ—Å–ª–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    updateBalance(winMultiplier, bet);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
spinButton.addEventListener('click', spinSlots);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª
document.addEventListener('keydown', (event) => {
    if (event.code === 'Space') {
        event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        spinSlots();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
balanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å: ${balance}`;
